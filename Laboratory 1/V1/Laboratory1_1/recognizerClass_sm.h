//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : recognizerClass.sm
//

#ifndef RECOGNIZERCLASS_SM_H
#define RECOGNIZERCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_SName_state;
class Map1_FoldName_state;
class Map1_FileName_state;
class Map1_OK;
class Map1_Default;
class recognizerClassState;
class recognizerClassContext;
class recognizerClass;

class recognizerClassState :
    public statemap::State
{
public:

    recognizerClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(recognizerClassContext&) {};
    virtual void Exit(recognizerClassContext&) {};

    virtual void EOS(recognizerClassContext& context);
    virtual void Letter(recognizerClassContext& context, char symb);
    virtual void PointOrUnderline(recognizerClassContext& context, char symb);
    virtual void Slash(recognizerClassContext& context, char symb);
    virtual void Unknown(recognizerClassContext& context);
    virtual void Whitespace(recognizerClassContext& context);

protected:

    virtual void Default(recognizerClassContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_SName_state SName_state;
    static Map1_FoldName_state FoldName_state;
    static Map1_FileName_state FileName_state;
    static Map1_OK OK;
};

class Map1_Default :
    public recognizerClassState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : recognizerClassState(name, stateId)
    {};

    virtual void Whitespace(recognizerClassContext& context);
    virtual void Letter(recognizerClassContext& context, char symb);
    virtual void Slash(recognizerClassContext& context, char symb);
    virtual void PointOrUnderline(recognizerClassContext& context, char symb);
    virtual void EOS(recognizerClassContext& context);
    virtual void Unknown(recognizerClassContext& context);
};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Letter(recognizerClassContext& context, char symb);
    virtual void Slash(recognizerClassContext& context, char symb);
    virtual void Whitespace(recognizerClassContext& context);
};

class Map1_SName_state :
    public Map1_Default
{
public:
    Map1_SName_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Letter(recognizerClassContext& context, char symb);
    virtual void Slash(recognizerClassContext& context, char symb);
};

class Map1_FoldName_state :
    public Map1_Default
{
public:
    Map1_FoldName_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(recognizerClassContext& context);
    virtual void Letter(recognizerClassContext& context, char symb);
    virtual void PointOrUnderline(recognizerClassContext& context, char symb);
    virtual void Slash(recognizerClassContext& context, char symb);
};

class Map1_FileName_state :
    public Map1_Default
{
public:
    Map1_FileName_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(recognizerClassContext& context);
    virtual void Letter(recognizerClassContext& context, char symb);
    virtual void PointOrUnderline(recognizerClassContext& context, char symb);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class recognizerClassContext :
    public statemap::FSMContext
{
public:

    explicit recognizerClassContext(recognizerClass& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    recognizerClassContext(recognizerClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline recognizerClass& getOwner()
    {
        return (_owner);
    };

    inline recognizerClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<recognizerClassState&>(*_state);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void Letter(char symb)
    {
        getState().Letter(*this, symb);
    };

    inline void PointOrUnderline(char symb)
    {
        getState().PointOrUnderline(*this, symb);
    };

    inline void Slash(char symb)
    {
        getState().Slash(*this, symb);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

    inline void Whitespace()
    {
        getState().Whitespace(*this);
    };

private:
    recognizerClass& _owner;
};


#endif // RECOGNIZERCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
